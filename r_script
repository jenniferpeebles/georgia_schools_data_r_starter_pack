---
title: "georgia_schools_data_starter_pack_script"
author: "Jennifer Peebles-The Atlanta Journal-Constitution"
date: "12/28/24"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, eval = TRUE, echo = FALSE, include = FALSE}

# Reminder: Package to update R is install.packages("installr") and then load library(installr). The command is then updateR().

# Reminder of what packages are automatically loaded in the core tidyverse, as of Dec. 28, 2024: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats. Also it loads also it loads DBI, haven, httr, readxl, googlesheets4, googledrive, rvest, jsonlite and xml2. More info at https://www.tidyverse.org/packages/

# Not included in the core tidyverse as of 12/28/24: lubridate, hms, blob, dbplyr, magrittr, glue, or any of the tidymodels packages (modelr/broom), and not reprex. 

# Load some packages
packages <- c("tidyverse", "janitor", "knitr", "magrittr")
lapply(packages, function(pkg) {
  if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
  library(pkg, character.only = TRUE)
})

# Settings
options(
  digits = 3,
  scipen = 999
)
knitr::opts_chunk$set(
  echo = TRUE,
  inline = function(x) prettyNum(x, big.mark = ",")
)


```

```{r get_ready, eval = TRUE, echo = FALSE, include = FALSE}

# If you want to clear out all the variables in your R workspace, I like to do this, you don't have to
# rm(list = ls(all.names = TRUE))

# show my working directory
getwd()

base_wd <- "F:/your_file_path_here/dont_forget/the_slashes_must_be_forward_slashes"
setwd(base_wd)
if (getwd() != base_wd) stop("Working directory not set correctly!")

```

```{r pull_in_data, eval = TRUE, echo = FALSE, include = FALSE}

# First, we have to read in our data file. If our file is in Excel, here's some code to help with that. First, let's give R the file path to our file. 
file_path <- "file_path_here/remember_to_use_only_forward_slashes/"
f <- "file_name_here_as_an_Excel_file.xlsx"
# Remember to update the name of the sheet if needed. 
d <- read_excel(file.path(file_path, f), sheet = "Table 1") %>% 
  janitor::clean_names()

# if you need to read in a downloaded CSV -- and all data downloaded from GaDOE will likely be in CSV's -- use this one ... 

# read in CSV file ... Here is a real file name from GaDOE as an example ... 
e <- "FTE Enrollment by Grade Fiscal Year2025-1 Data Report.csv"

# remember to change your file path if the file in "e" is in a different directory ... 
file_path <-  "file_path_here/remember_to_use_only_forward_slashes/"

# Note this has a skip setting on it to tell it to ignore a certain number of lines. This is common with schools data ... 
e <- read_csv(file.path(file_path, e), skip = 4) %>% 
  janitor::clean_names()


```

```{r fix_id_numbers, eval = TRUE, echo = FALSE, include = FALSE}

# it's often good to know how many rows are in your data frame. Let's find out. 
num_rows_in_df <- nrow(d2)

# Extract the three left-most characters from a string (the column here is called column) to pull out the system ID. 

num_chars = 3
extract_left <- function(column, num_chars) {
  substr(column, 1, num_chars)
}

# Check length of a given column (here: column) with nchar. 
nchar(column)

# For columns that have the four-digit school ID code in the first four characters of a string (the string here is column), this is a code that will extract those first four digits and place them in a new column called sch_id
df$sch_id <- substr(df$column, 1, 4)

# Extract the four right-most characters from a string of variable length -- the string here is called column -- to extract the school ID. This snippet determines the length of that string and then tells R to extract the characters from [the fourth-last to the last spot, whatever that is] to the ending spot. 
# Remember to change the number of num_chars if needed. 
# num_chars = 3
extract_right <- function(column, num_chars) {
  substr(column, nchar(column) - num_chars + 1, nchar(column))
}

# Now, we can process our data using our extract_left and extract_right functions from above
df <- df %>%
  mutate(
    system_id = extract_left(our_column_name, 3),
    school_id = extract_right(our_column_name, 4)
  )

# If you need to pad out the school ID column with leading zeroes ... use the str_pad function from stringr.
str_pad(df$column_name,4, pad = "0")
# Then you can use the paste or paste0 commands to combine the system ID and school ID. 

# Paste0 works as follows:
paste0("first_item_to_paste", "second_item_to_paste", "and_so_on") %>% print()


# Check the length of a column of system ID's; save the length in a new column. 

df$length_sys_id <- nchar(df$system_id)

# Limit our data to just schools with 3-digit system ID's. The state always expresses the school ID's of the state-run schools as 7-digit numbers, for reasons I've never understood. I have manually checked for the 2024 promise school list and none of the state-run schools are on the promise school list. Rather than continuing to screw with string functions, let's just take the state-run schools out for now entirely since they aren't part of this discussion. 

df <- df %>%  filter(length_sys_id == 3)

```

```{r filtering_schools_and_systems, eval = TRUE, echo = FALSE, include = FALSE}

# if you need to look for state schools, you can use these snippets

df %>%  filter(str_detect(school_name, "state"))

View(df %>%  filter(str_detect(school_name, "state")))

# For use on data frames that contain a mix of records in the table for school-level data and system- (or district-level) data, here is a snippet of code that will filter out rows marked "System Total" -- first set our variable, then we'll filter those rows out below ...

filter_keyword <- "System Total"

# And this will allow us to filter out the special state schools, which often have small enrollments that lead to outliers in statistical analysis. 
state_keyword <- "state"

# Filter out the state-run schools and the system-level/district level total records, so we are left with a data frame of just the individual schools excluding the state special schools. 
def <- df %>%
  filter(nchar(system_id) == 3, !str_detect(school_name, filter_keyword)) %>%
  mutate(length_sys_id = nchar(system_id))

# Extract state-run schools for separate analysis if neededd. 
state_schools <- df %>%
  filter(str_detect(school_name, state_keyword) | nchar(system_id) == 7)

# Note that the most recent GaDOE enrollment data by school lives at https://app3.doe.k12.ga.us/ows-bin/owa/fte_pack_enrollgrade.entry_form


```
